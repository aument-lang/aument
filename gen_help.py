left_pad = 12
line_pad = '    '

commands = [
    (
        "build",
        "builds source code into a single binary",
        "input-file output-file",
        """\
Builds *input-file* into an executable binary named *output-file*.

aulang compiles code by invoking a C compiler. By default, this is *gcc*,
however you can have aulang use another compiler by specifying it in
the `CC` environment variable.

aulang invokes the C compiler with the following arguments:

```
-flto -O2
```

Passing `-b` will make aulang output bytecode before it is compiled to C.

Passing `-c` will make aulang write C code into *output-file* instead
of outputting a compiled binary. Note that since modules are compiled
down to external header files, the resulting C code will not actually
compile if files are imported.\
""",
    ),
    (
        "run",
        "runs a program",
        "input-file",
        """\
Runs *input-file* through an interpreter.

Passing `-b` will make aulang output bytecode before it is interpreted.\
""",
    ),
    (
        "help",
        "shows this help screen",
        "[command]",
        """\
Shows the documentation for a specified command if given.
Else, a general help screen is shown.\
""",
    ),
    (
        "version",
        "print aulang version",
        "",
        "Prints aulang's current version number."
    )
]
commands.sort(key=lambda x: x[0])

text = {}

main_template = """\
Usage:
    aulang [command] [options] file...

Commands:
%s

Use aulang help [command] for more information.

Copyright (c) 2021 the aulang contributors.
Project link: https://github.com/chm8d/aulang
"""

text["main"] = main_template % ('\n'.join(map(lambda x: line_pad + x[0].ljust(left_pad) + x[1],commands)))

for cmd in commands:
    name, summary, args, doc = cmd
    text[name] = f"""\
Usage:
    aulang {args} {args}

Summary:
    {doc}

{name}
"""

c_src = "/* This file is generated by gen_help.py. Please don't modify it. */\n#pragma once\n#include <string.h>\n\n"
for k,v in text.items():
    c_src += ("static const char *AU_HELP_%s = \"%s\";\n"%(k.upper(), v.encode('unicode_escape').decode('ascii').replace('"', '\\"')))

c_src += "static const char *help_text(const char *action) {"
for k in text:
    c_src += "if(strcmp(action,\"%s\")==0)return AU_HELP_%s;"%(k,k.upper())
c_src += "return AU_HELP_MAIN;}"

with open("src/help.h", "w") as f:
    f.write(c_src)

md_src = """\
# Command line options

aulang can be invoked in the following way:

```
aulang [command] [options] file...
```

This section documents aulang's commands.

The section below was generated automatically (devs: *gen_help.py*).
Please don't modify it by hand!

"""
for cmd in commands:
    name, summary, args, doc = cmd
    md_src += f"""\
## `{name}`: {summary}

### Usage

```
aulang {name} {args}
```

### Description

{doc}

"""

with open("docs/cmdline.md", "w") as f:
    f.write(md_src)